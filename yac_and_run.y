%{
	#include<stdio.h>
	extern FILE *yyin;
%}
%token INCLUDE LIBR DEFINE UNS CLASS SCOPE DTYPE DTYPE_QUAL BIN_ARITH_OPERATOR INCDEC ASSIGNOP BIN_BOOL ADDRESS UN_BOOL GENERIC SQ LPAREN RPAREN SQ_LEFT SQ_RIGHT FL_LEFT FL_RIGHT ASSIGN SEMICOLON COLON COMMA OUTPUT INPUT CIN COUT COMPR IF ELSE ELSE_IF FOR WHILE DO SWITCH CASE DEFAULT MAIN BOOL_RES LOOP_EXIT RETURN LETTER NUM IDEN STRING
%%
Sdash	:	S	{ printf("No errors!\n");	return 0;	}
;
S	:	HEADERS MACROS NS CLASSES FUN_SCOPE_DEF MAINS
	;

	HEADERS	:	INCLUDE LIBR HEADERSDASH
		;
		HEADERSDASH	:	HEADERS
				|
				;
	
	NS	:	UNS IDEN SEMICOLON
		|
		;
	MACROS	:	DEFINE IDEN NUM
		|
		;


CLASSES	:	CDECLR CLASSES
	|	CDEFN CLASSES
	|
	;

	CDECLR	:	CLASS IDLIST SEMICOLON
		;
		
		IDLIST	:	IDEN IDLISTDASH
			;

			IDLISTDASH	:	COMMA IDLIST
					|
					;


	CDEFN	: CLASS IDEN FL_LEFT CLASS_BODY FL_RIGHT CLASS_VARIABLE SEMICOLON
		;

		CLASS_VARIABLE	:	ID
				|
				;

		CLASS_BODY	:	EXPR_BODY CLASS_BODY
				|
				;

			EXPR_BODY	:	SCOPE COLON EXPR_DASH
					;

				EXPR_DASH	:	EXPR_DBLDASH E
						;

						EXPR_DBLDASH	:	DECLARATIONS
								|	FUNCTION_PROTO
								|	FUNCTION_DEFN
								;
				
						E		:	EXPR_DASH
								|
								;


							DECLARATIONS	:	DTYPE ID X SEMICOLON DECLARATIONS
									|
									;
	
										X	:	COMMA ID X
											|
											;

						FUNCTION_DEFN	:	DTYPE IDEN LPAREN ARGLISTF RPAREN FL_LEFT FUNCTION FL_RIGHT
								;

						FUNCTION_PROTO	:	DTYPE IDEN LPAREN PROTO_F RPAREN SEMICOLON
								;

									PROTO_F	:	DTYPE PTRD TDASH
										|	PROTO_D
										|	GENERIC
										;
										
										TDASH	:	PROTO_D
											;

											PROTO_D	:	COMMA DTYPE PTRD PROTO_D
												|
												;

										PTRD	:	BIN_ARITH_OPERATOR
											|
											;



FUN_SCOPE_DEF	:	DTYPE IDEN COLON COLON IDEN LPAREN ARGLISTF RPAREN FL_LEFT FUNCTION FL_RIGHT
		|
		;


MAINS	:	DTYPE MAIN LPAREN ARGLISTF RPAREN FL_LEFT FUNCTION FL_RIGHT
	|
	;

	ARGLISTF:	DTYPE ID T
		|	ARGLISTFD
		;

		T	:	ARGLISTFD
			;

			ARGLISTFD	:	COMMA DTYPE ID ARGLISTFD
					|
					; 

				ID	:	IDEN IDDASH
					|	ADDRESS IDEN IDDASH
					;

					IDDASH	:	M
						;

						M	:	SQ_LEFT MD
							|	
							;
							MD	:	EXPRESSION SQ_RIGHT M
								|	SQ_RIGHT M	;



FUNCTION	:	IO SEMICOLON FUNCTION
		|	DECLR_STMT SEMICOLON FUNCTION
		|	ASSIGN_STMT SEMICOLON FUNCTION
		|	DECLR_ASSIGN SEMICOLON FUNCTION
		|	INCRDECR SEMICOLON FUNCTION
		|	FDW FUNCTION
		| 	LOOP_EXIT SEMICOLON FUNCTION
		|	BRANCHES FUNCTION
		|	SWITCHER FUNCTION
		|	RET SEMICOLON FUNCTION
		|	ASSID SEMICOLON FUNCTION
		|
		;

		IO	:	CIN INPUT ID CINEXPR
			|	COUT COUTEXPR
			;

			CINEXPR	:	INPUT ID CINEXPR
				|
				;
			COUTEXPR	:	COUTSUBA COUTEXPR
					|
					;
				COUTSUBA	:	OUTPUT COUTSUBB	;
					COUTSUBB	:	STRING
							|	ID
							;

		DECLR_STMT	:	DTYPE ID DECLR2
				;
				DECLR2	:	COMMA ID DECLR2
					|
					;

		ASSIGN_STMT	:	ID ASSIGN1 ASSIGN2	;
				ASSIGN1	:	ASSIGN
					|	ASSIGNOP
					;
				ASSIGN2	:	STRING
					|	EXPRESSION
					|	SQ
					;
					EXPRESSION	:	EXPRESSION BIN_ARITH_OPERATOR EXPRESSION
							|	LPAREN EXPRESSION RPAREN
							|	INCDEC EXPRESSION
							|	EXPRESSION INCDEC
							|	BOOL_RES
							|	NUM
							|	ASSID
							;
						ASSID		:	ID ASSID_DASH	;
							ASSID_DASH	:	LPAREN PEXP RPAREN	
									|	;
									PEXP	:	ID PEXP3
										|	NUM PEXP3
										|	;
										PEXP3	:	PEXP2	|	;
											PEXP2	:	COMMA PEXP4
												|
												;
												PEXP4	:	ID PEXP2
													|	NUM PEXP2
													;

		DECLR_ASSIGN	:	DTYPE DASTMT DA2	;
				DA2	:	COMMA DASTMT DA2
					|	;
				DASTMT	:	ID
					|	IDEN ASSIGN EXPRESSION
					;


		INCRDECR	:	EXPRESSION INCDEC
				|	INCDEC EXPRESSION
				;


	FDW	:	FOR LPAREN FOR1 SEMICOLON CONDITION SEMICOLON FOR3 RPAREN FL_LEFT FUNCTION FL_RIGHT
		|	WHILE LPAREN CONDITION RPAREN FL_LEFT FUNCTION FL_RIGHT
		|	DO FL_LEFT FUNCTION FL_RIGHT WHILE LPAREN CONDITION RPAREN SEMICOLON
		;
		
		FOR1	:	ASSIGN_STMT FOR1COMMAS
			|	DECLR_ASSIGN FOR1COMMAS
			|	FOR1COMMAS
			FOR1COMMAS	:	COMMA FOR1
					|	;

		FOR3	:	INCRDECR FOR3COMMAS
			|	ASSIGN_STMT FOR3COMMAS
			|	FOR3COMMAS
			;
			FOR3COMMAS	:	COMMA FOR3
					|	;
			


	BRANCHES	:	IF LPAREN CONDITION RPAREN FL_LEFT FUNCTION FL_RIGHT EXP_FURTHER
			;
	EXP_FURTHER	:	ALF1 EXP_FURTHER
			|	EXP_F2
			;
	EXP_F2		:	ELSE FL_LEFT FUNCTION FL_RIGHT
			|
			;
			ALF1	:	ELSE_IF LPAREN CONDITION RPAREN FL_LEFT FUNCTION FL_RIGHT
				;

	CONDITION	:	PART Q
			|	UN_BOOL	PART Q
			|
			;
		Q	:	BIN_BOOL PART Q
			|	
			;
		PART	:	EXPRESSION COMPR EXPRESSION
			|	LPAREN PART RPAREN
			|	EXPRESSION
			;


	SWITCHER	:	SWITCH LPAREN ID RPAREN FL_LEFT CSS DFF FL_RIGHT
			;
	CSS		:	CCC DFF CCC
			;
	CCC		:	CASES CCC
			|
			;
	CASES		:	CASE CASEINDEX COLON FUNCTION CASES
			|
			;
	DFF		:	DEF
			|
			;
	DEF		:	DEFAULT COLON FUNCTION
			;
	CASEINDEX	:	NUM | STRING | SQ ;


	RET	:	RETURN R2
		;
		R2	:	EXPRESSION
			|	;

%%
int main(){
	yyin = fopen("sam.cpp","r");
	yyparse();
	return 0;
}
int yyerror(){
	printf("Error\n");
	return 0;
}
int yywrap(){
	return 1;
}